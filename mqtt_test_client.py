import paho.mqtt.client as mqtt
import struct
import time
import random
import logging
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT –±—Ä–æ–∫–µ—Ä—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
MQTT_BROKER = "94.156.114.240"  # IP –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
MQTT_PORT = 1883
MQTT_USER = "gps_user"
MQTT_PASSWORD = "Mavaincee2020"

# –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
DEVICE_ID = "eqw1054"          # ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
INITIAL_LAT = 52.52            # –ù–∞—á–∞–ª—å–Ω–∞—è —à–∏—Ä–æ—Ç–∞
INITIAL_LON = 13.405          # –ù–∞—á–∞–ª—å–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
acc_state = False  # –°–æ—Å—Ç–æ—è–Ω–∏–µ ACC (False = –≤—ã–∫–ª—é—á–µ–Ω–æ, True = –≤–∫–ª—é—á–µ–Ω–æ)

def on_connect(client, userdata, flags, rc):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±—Ä–æ–∫–µ—Ä—É
    rc = 0: —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    rc = 5: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    if rc == 0:
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É")
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_topic = f"gps/{DEVICE_ID}/control"
        client.subscribe(control_topic)
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫: {control_topic}")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {rc}")

def on_message(client, userdata, msg):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    –ó–¥–µ—Å—å –º—ã –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è ACC
    """
    global acc_state
    
    try:
        command = json.loads(msg.payload.decode())
        action = command.get('action')
        
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {action}")
        
        if action == 'enable':
            acc_state = True
            logger.info("üîë ACC –í–ö–õ–Æ–ß–ï–ù–û")
        elif action == 'disable':
            acc_state = False
            logger.info("üîë ACC –í–´–ö–õ–Æ–ß–ï–ù–û")
            
        response = {
            'status': 'success',
            'action': action,
            'acc': acc_state,
            'timestamp': datetime.utcnow().isoformat()
        }
        response_topic = f"gps/{DEVICE_ID}/control/response"
        client.publish(response_topic, json.dumps(response))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

def send_gps_data(client):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ GPS –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∂–∏–≥–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    """
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–∏–º–∏—Ç–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è)
        lat = INITIAL_LAT + random.uniform(-0.001, 0.001)  # ¬±~100 –º–µ—Ç—Ä–æ–≤
        lon = INITIAL_LON + random.uniform(-0.001, 0.001)
        
        # –ï—Å–ª–∏ ACC –≤—ã–∫–ª—é—á–µ–Ω–æ - —Å–∫–æ—Ä–æ—Å—Ç—å 0
        speed = random.uniform(0, 60) if acc_state else 0.0

        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        # !ddfi - —Ñ–æ—Ä–º–∞—Ç:
        # d - double (8 –±–∞–π—Ç) –¥–ª—è —à–∏—Ä–æ—Ç—ã
        # d - double (8 –±–∞–π—Ç) –¥–ª—è –¥–æ–ª–≥–æ—Ç—ã
        # f - float (4 –±–∞–π—Ç–∞) –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        # i - int (4 –±–∞–π—Ç–∞) –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ACC (0/1)
        payload = struct.pack("!ddfi", lat, lon, speed, int(acc_state))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ø–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        topic = f"gps/{DEVICE_ID}/location"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        client.publish(topic, payload)

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"üìç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:")
        logger.info(f"–¢–æ–ø–∏–∫: {topic}")
        logger.info(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}")
        logger.info(f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} –∫–º/—á")
        logger.info(f"ACC: {'üîë –í–ö–õ' if acc_state else 'üîë –í–´–ö–õ'}")
        logger.info("-" * 50)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    # –°–æ–∑–¥–∞–µ–º MQTT –∫–ª–∏–µ–Ω—Ç–∞
    client = mqtt.Client()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    client.on_connect = on_connect
    client.on_message = on_message
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—Ä–æ–∫–µ—Ä—É
    client.username_pw_set(MQTT_USER, MQTT_PASSWORD)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±—Ä–æ–∫–µ—Ä—É
        logger.info(f"üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {MQTT_BROKER}:{MQTT_PORT}")
        client.connect(MQTT_BROKER, MQTT_PORT, 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ MQTT —Å–æ–æ–±—â–µ–Ω–∏–π
        client.loop_start()

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        while True:
            send_gps_data(client)
            time.sleep(5)  # –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

    except KeyboardInterrupt:
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ Ctrl+C
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        client.loop_stop()
        client.disconnect()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...")
    main() 