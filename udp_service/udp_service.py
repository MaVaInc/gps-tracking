import socket
import struct
import threading
import json
from datetime import datetime
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from backend.database import Base
from backend.models import Vehicle, Loca6666666666666666tionHistory

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ UDP —Å–µ—Ä–≤–µ—Ä–∞
UDP_IP = "0.0.0.0"  # –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
UDP_PORT = 8888     # –ü–æ—Ä—Ç –¥–ª—è UDP
BUFFER_SIZE = 1024  # –£–≤–µ–ª–∏—á–∏–º –±—É—Ñ–µ—Ä –¥–ª—è JSON –∫–æ–º–∞–Ω–¥

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
SQLALCHEMY_DATABASE_URL = "sqlite:////var/www/gps/test.db"
engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def process_gps_data(data: bytes, addr: tuple):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ GPS –¥–∞–Ω–Ω—ã—Ö –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    try:
        device_id, lat, lon = struct.unpack("!16sdd", data)
        device_id = device_id.decode('utf-8').strip('\0')
        
        print(f"–ü–æ–ª—É—á–µ–Ω—ã GPS –¥–∞–Ω–Ω—ã–µ –æ—Ç {addr}:")
        print(f"device_id: {device_id}, lat: {lat}, lon: {lon}")
        
        db = SessionLocal()
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            vehicle = db.query(Vehicle).filter(Vehicle.device_id == device_id).first()
            if vehicle:
                vehicle.current_location_lat = lat
                vehicle.current_location_lng = lon
                vehicle.last_update = datetime.utcnow()
                vehicle.last_ip = addr[0]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                db.commit()
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –¥–ª—è {device_id}")
            else:
                print(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {device_id}")
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GPS –¥–∞–Ω–Ω—ã—Ö: {e}")

def process_control_command(data: bytes):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        command = json.loads(data.decode())
        print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")
        
        device_id = command.get('device_id')
        action = command.get('action')
        
        if device_id and action:
            db = SessionLocal()
            try:
                vehicle = db.query(Vehicle).filter(Vehicle.device_id == device_id).first()
                if vehicle:
                    if action == 'disable':
                        vehicle.status = 'disabled'
                    elif action == 'enable':
                        vehicle.status = 'online'
                    db.commit()
                    print(f"‚úÖ –°—Ç–∞—Ç—É—Å {device_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {action}")
            finally:
                db.close()
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

def udp_server():
    """UDP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–º–∞–Ω–¥"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((UDP_IP, UDP_PORT))
    print(f"üöÄ UDP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {UDP_IP}:{UDP_PORT}")

    while True:
        try:
            data, addr = sock.recvfrom(BUFFER_SIZE)
            print(f"\nüì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç {addr[0]}:{addr[1]}")
            
            # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ 32 –±–∞–π—Ç–∞ - —ç—Ç–æ GPS –¥–∞–Ω–Ω—ã–µ
            if len(data) == 32:
                process_gps_data(data, addr)
            # –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ JSON –∫–æ–º–∞–Ω–¥—É
            else:
                process_control_command(data)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ UDP —Å–µ—Ä–≤–µ—Ä–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ UDP —Å–µ—Ä–≤–∏—Å–∞...")
    udp_server() 