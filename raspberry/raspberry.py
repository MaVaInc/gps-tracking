import machine
import utime
import struct
import _thread
import random

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UART –¥–ª—è GSM
gsm = machine.UART(1, 9600, tx=machine.Pin(8), rx=machine.Pin(9))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ª–µ
relay = machine.Pin(2, machine.Pin.OUT)
relay.value(1)  # –í–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
DEVICE_ID = "eqw1054"
SERVER_IP = "94.156.114.240"
SERVER_PORT = 8888

def send_at(command, wait=2, retries=3):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ AT –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏"""
    for attempt in range(retries):
        print(f"-> {command} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
        
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        while gsm.any():
            gsm.read()
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        gsm.write((command + "\r\n").encode())
        utime.sleep(wait)  # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
        
        response = ""
        # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç
        while gsm.any():
            try:
                chunk = gsm.read().decode('utf-8', 'ignore')
                response += chunk
            except:
                continue
                
        response = response.strip()
        print(f"<- {response}")
        
        if "OK" in response or "CONNECT OK" in response or "SEND OK" in response or "SHUT OK" in response:
            return response
            
        if "ERROR" in response:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response}")
            utime.sleep(2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            continue
            
        print("‚ö†Ô∏è –ù–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
        utime.sleep(1)
        
    return None

def init_gsm():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GSM –º–æ–¥—É–ª—è"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GSM –º–æ–¥—É–ª—è...")
    
    # –°–±—Ä–æ—Å –º–æ–¥—É–ª—è
    print("–°–±—Ä–æ—Å –º–æ–¥—É–ª—è...")
    utime.sleep(2)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ö–æ —Å—Ä–∞–∑—É
    send_at("ATE0", wait=3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å –º–æ–¥—É–ª–µ–º
    if not send_at("AT", wait=3):
        print("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        return False
    
    # –ñ–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–µ—Ç–∏
    for _ in range(10):  # –ü—Ä–æ–±—É–µ–º 10 —Ä–∞–∑
        response = send_at("AT+CREG?", wait=3)
        if response and ("+CREG: 0,1" in response or "+CREG: 0,5" in response):
            break
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–µ—Ç–∏...")
        utime.sleep(2)
    else:
        print("‚ùå –ù–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–µ—Ç–∏")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞
    response = send_at("AT+CSQ", wait=3)
    if not response or "+CSQ:" not in response:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞")
        return False
        
    print("‚úÖ GSM –º–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return True

def setup_gprs():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPRS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    print("üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPRS...")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    send_at("AT+CIPSHUT", wait=5)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if not send_at("AT+CIPMUX=0"):
        return False
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫ GPRS
    response = send_at('AT+CGATT?')
    if not response or "+CGATT: 1" not in response:
        return False
        
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º APN
    if not send_at('AT+CSTT="internet.lebara.de"'):
        return False
        
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ GPRS
    if not send_at('AT+CIICR', wait=5):
        return False
        
    # –ü–æ–ª—É—á–∞–µ–º IP
    response = send_at('AT+CIFSR', wait=2)
    if not response or '.' not in response:
        return False
        
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω IP: {response}")
    return True

def setup_udp():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    print(f"üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {SERVER_IP}:{SERVER_PORT}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    send_at('AT+CIPCLOSE', wait=1)
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    response = send_at(f'AT+CIPSTART="UDP","{SERVER_IP}","{SERVER_PORT}"', wait=5)
    if response and "CONNECT OK" in response:
        print("‚úÖ UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return True
    
    print("‚ùå –û—à–∏–±–∫–∞ UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
    return False

def send_udp_data(lat, lon):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ GPS –¥–∞–Ω–Ω—ã—Ö"""
    try:
        data = struct.pack("!16sdd", 
            DEVICE_ID.ljust(16, '\0').encode(),
            float(lat),
            float(lon)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        if not send_at(f'AT+CIPSEND={len(data)}', wait=1):
            return False
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        gsm.write(data)
        utime.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        response = send_at('AT+CIPSTATUS', wait=1)
        if response and "CONNECT OK" in response:
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}")
            return True
            
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def check_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    response = send_at('AT+CIPSTATUS', wait=1)
    if response and "CONNECT OK" in response:
        return True
    return False

def listen_for_commands():
    """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    while True:
        try:
            response = send_at("AT+CIPRXGET=2,1")
            if response and '+CIPRXGET: 2,1,' in response:
                # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç–µ
                if "disable" in response.lower():
                    relay.value(0)
                    print("‚ö†Ô∏è –†–µ–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
                elif "enable" in response.lower():
                    relay.value(1)
                    print("‚úÖ –†–µ–ª–µ –≤–∫–ª—é—á–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∞ –∫–æ–º–∞–Ω–¥: {e}")
        utime.sleep(1)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–µ–º –∫–æ–º–∞–Ω–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
_thread.start_new_thread(listen_for_commands, ())

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
print("üî• –ó–∞–ø—É—Å–∫ GPS —Ç—Ä–µ–∫–µ—Ä–∞...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
while not init_gsm():
    print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
    utime.sleep(5)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPRS
while not setup_gprs():
    print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ GPRS —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
    utime.sleep(5)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UDP
while not setup_udp():
    print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ UDP —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
    utime.sleep(5)

print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
while True:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if not check_connection():
            print("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            if not setup_gprs() or not setup_udp():
                continue
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        lat = round(48.0 + random.uniform(-0.5, 0.5), 6)
        lon = round(10.0 + random.uniform(-0.5, 0.5), 6)
        print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if not send_udp_data(lat, lon):
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            continue
            
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        utime.sleep(5)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        utime.sleep(5) 