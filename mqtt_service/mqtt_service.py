import paho.mqtt.client as mqtt
import struct
import json
from datetime import datetime
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from backend.database import Base
from backend.models import Vehicle, LocationHistory

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ MQTT
MQTT_BROKER = "localhost"  # –ò–ª–∏ IP –≤–∞—à–µ–≥–æ MQTT –±—Ä–æ–∫–µ—Ä–∞
MQTT_PORT = 1883
MQTT_TOPIC_GPS = "gps/+/location"  # + –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ device_id
MQTT_TOPIC_CONTROL = "gps/+/control"
MQTT_USERNAME = "gps_user"
MQTT_PASSWORD = "Mavaincee2020"  # –¢–µ –∂–µ –¥–∞–Ω–Ω—ã–µ —á—Ç–æ –∏ –≤ –∫–ª–∏–µ–Ω—Ç–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
SQLALCHEMY_DATABASE_URL = "sqlite:////var/www/gps/test.db"
engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def process_gps_data(device_id: str, payload: bytes):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ GPS –¥–∞–Ω–Ω—ã—Ö –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    try:
        logger.info("=" * 50)
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GPS –¥–∞–Ω–Ω—ã—Ö")
        logger.info(f"Device ID: {device_id}")
        logger.info(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(payload)} –±–∞–π—Ç")
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤–∫–ª—é—á–∞—è acc)
        lat, lon, speed, acc = struct.unpack("!ddfi", payload)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º acc –≤ boolean
        acc_state = bool(acc)
        
        logger.info(f"–†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        logger.info(f"- –®–∏—Ä–æ—Ç–∞: {lat}")
        logger.info(f"- –î–æ–ª–≥–æ—Ç–∞: {lon}")
        logger.info(f"- –°–∫–æ—Ä–æ—Å—Ç—å: {speed} –∫–º/—á")
        logger.info(f"- ACC: {'–í–ö–õ' if acc_state else '–í–´–ö–õ'}")
        
        db = SessionLocal()
        try:
            logger.info("–ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –ë–î...")
            vehicle = db.query(Vehicle).filter(Vehicle.device_id == device_id).first()
            
            if vehicle:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {vehicle.name} (ID: {vehicle.id})")
                logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∞
                old_lat = vehicle.current_location_lat
                old_lon = vehicle.current_location_lng
                old_speed = vehicle.speed
                old_acc = vehicle.acc
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                vehicle.current_location_lat = lat
                vehicle.current_location_lng = lon
                vehicle.speed = speed
                vehicle.acc = acc_state
                vehicle.last_update = datetime.utcnow()
                
                # –°—Ç–∞—Ç—É—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç ACC
                vehicle.status = 'online' if acc_state else 'offline'
                
                logger.info("–ò–∑–º–µ–Ω–µ–Ω–∏—è:")
                logger.info(f"- –ü–æ–∑–∏—Ü–∏—è: {old_lat},{old_lon} -> {lat},{lon}")
                logger.info(f"- –°–∫–æ—Ä–æ—Å—Ç—å: {old_speed} -> {speed}")
                logger.info(f"- ACC: {old_acc} -> {acc_state}")
                logger.info(f"- –°—Ç–∞—Ç—É—Å: {vehicle.status}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                history = LocationHistory(
                    vehicle_id=vehicle.id,
                    lat=lat,
                    lng=lon,
                    speed=speed,
                    acc=acc_state,
                    timestamp=datetime.utcnow()
                )
                db.add(history)
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é")
                
                db.commit()
                logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            else:
                logger.warning(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {device_id}")
                logger.warning("–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
                vehicles = db.query(Vehicle).all()
                for v in vehicles:
                    logger.warning(f"- {v.device_id}: {v.name}")
        finally:
            db.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GPS –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")

def process_control_command(device_id: str, payload: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        logger.info("=" * 50)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        logger.info(f"Device ID: {device_id}")
        logger.info(f"Payload: {payload}")
        
        command = json.loads(payload)
        action = command.get('action')
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞: {action}")
        
        if action:
            db = SessionLocal()
            try:
                logger.info("–ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –ë–î...")
                vehicle = db.query(Vehicle).filter(Vehicle.device_id == device_id).first()
                
                if vehicle:
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {vehicle.name}")
                    logger.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {vehicle.status}")
                    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ACC: {vehicle.acc}")
                    
                    if action == 'disable':
                        vehicle.status = 'disabled'
                        vehicle.acc = False
                        logger.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ ACC...")
                    elif action == 'enable':
                        vehicle.status = 'online'
                        vehicle.acc = True
                        logger.info("–í–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ ACC...")
                        
                    db.commit()
                    logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {vehicle.status}")
                    logger.info(f"‚úÖ ACC: {'–í–ö–õ' if vehicle.acc else '–í–´–ö–õ'}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    response_topic = f"gps/{device_id}/control/response"
                    response_payload = {
                        "status": "success",
                        "action": action,
                        "acc": vehicle.acc,
                        "timestamp": datetime.utcnow().isoformat()
                    }
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫: {response_topic}")
                    logger.info(f"Payload: {response_payload}")
                    
                    client.publish(response_topic, json.dumps(response_payload))
                    logger.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            finally:
                db.close()
                logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")

def on_connect(client, userdata, flags, rc):
    """Callback –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±—Ä–æ–∫–µ—Ä—É"""
    if rc == 0:
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É")
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫–∏
        client.subscribe(MQTT_TOPIC_GPS)
        client.subscribe(MQTT_TOPIC_CONTROL)
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT –±—Ä–æ–∫–µ—Ä—É: {rc}")

def on_message(client, userdata, msg):
    """Callback –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º device_id –∏–∑ —Ç–æ–ø–∏–∫–∞
        topic_parts = msg.topic.split('/')
        if len(topic_parts) < 3:
            return
        
        device_id = topic_parts[1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–æ–ø–∏–∫—É
        if 'location' in msg.topic:
            process_gps_data(device_id, msg.payload)
        elif 'control' in msg.topic:
            process_control_command(device_id, msg.payload.decode())
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    client = mqtt.Client()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callbacks
    client.on_connect = on_connect
    client.on_message = on_message
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    client.username_pw_set(MQTT_USERNAME, MQTT_PASSWORD)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±—Ä–æ–∫–µ—Ä—É
        logger.info(f"üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É {MQTT_BROKER}:{MQTT_PORT}")
        client.connect(MQTT_BROKER, MQTT_PORT, 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        client.loop_forever()
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ MQTT —Å–µ—Ä–≤–∏—Å–∞...")
    main() 